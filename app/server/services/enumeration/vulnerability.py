from datetime import datetime
import os
import subprocess
from fastapi import UploadFile
from app.server.database.collections import Collections
from app.server.database import services as core_services
from app.server.logger.custom_logger import logger
from app.server.static import enums
import requests
import os
from threading import Thread
from app.server.utils import pdf_utils
import re
from dotenv import load_dotenv
load_dotenv()

"""
Note : 
    1.add 'sudo' before every command when running locally(without docker) as some commands require sudo permission.
    2.add '-Pn' flag in nmap command for portscaning using no ping scan.
"""
current_file_path = os.path.abspath(__file__)
current_file_parent = os.path.dirname(current_file_path)
current_file_grandparent = os.path.dirname(current_file_parent)
current_file_great_grandparent = os.path.dirname(current_file_grandparent)

def sys_cmd(cmd):
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return process
    
async def nmap_port_scan(ip_address,options,ports:str):
    try:
        logger.debug('starting nmap port scan')
        ip_pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
        ip_address = ''.join(re.findall(ip_pattern, ip_address))
        logger.debug('kill existing all instances of nmap')
        process = sys_cmd('killall nmap')
        if options == enums.OPTIONS.ALL:
            cmd = f"nmap -p- {ip_address} -vv > ./reports/enumeration/vulnerability/nmap/nmap_port_scan.log"
        else:
            port_pattern = r'\d+,'
            valid_ports = ''.join(re.findall(port_pattern, ports))
            cmd = f"nmap -p{valid_ports} {ip_address} -vv > ./reports/enumeration/vulnerability/nmap/nmap_port_scan.log"
        process =  sys_cmd(cmd)
        return {'message':'Nmap Port scan is running in background.'}
    except Exception as e:
        raise Exception(str(e))

async def nmap_os_scan(ip_address):
    try:
        logger.debug('starting nmap OS scan')
        pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
        ip_address = ''.join(re.findall(pattern, ip_address))
        logger.debug('kill existing all instances of nmap')
        process = sys_cmd('killall nmap')
        cmd = f"nmap  {ip_address} -O -vv -sS > ./reports/enumeration/vulnerability/nmap/nmap_os_results.log"
        process =  sys_cmd(cmd)
        return {'message':'Nmap OS scan is running in background.'}
    except Exception as e:
        raise Exception(str(e))

async def nmap_script_scan(ip_address,options,ports):
    try:
        logger.debug('starting nmap vulnerability scan')
        pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
        ip_address = ''.join(re.findall(pattern, ip_address))
        logger.debug('kill existing all instances of nmap')
        process = sys_cmd('killall nmap')
        if options == enums.OPTIONS.ALL:
            cmd = f"nmap {ip_address}  -sC -vv > ./reports/enumeration/vulnerability/nmap/nmap_scripts_scan.log"
        else:
            port_pattern = r'\d+,'
            valid_ports = ''.join(re.findall(port_pattern, ports))
            cmd = f"nmap  -p{valid_ports} {ip_address} -sC -vv  > ./reports/enumeration/vulnerability/nmap/nmap_scripts_scan.log"
        process =  sys_cmd(cmd)
        return {'message':'Nmap Script scan is running in background.'}
    except Exception as e:
        raise Exception(str(e))

async def nmap_vulnerability_scan(ip_address,options,ports):
    try:
        logger.debug('starting nmap vulnerability scan')
        pattern = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
        ip_address = ''.join(re.findall(pattern, ip_address))
        logger.debug('kill existing all instances of nmap')
        process = sys_cmd('killall nmap')
        if options == enums.OPTIONS.ALL:
            cmd = f"nmap {ip_address} --script vuln -vv  > ./reports/enumeration/vulnerability/nmap/nmap_vulnerability_scan.log"
        else:
            port_pattern = r'\d+,'
            valid_ports = ''.join(re.findall(port_pattern, ports))
            cmd = f"nmap -p{valid_ports} {ip_address} --script vuln -vv  > ./reports/enumeration/vulnerability/nmap/nmap_vulnerability_scan.log"
        process =  sys_cmd(cmd)
        return {'message':'Nmap Vulnerability scan is running in background.'}
    except Exception as e:
        raise Exception(str(e))
