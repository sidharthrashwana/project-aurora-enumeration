from typing import Any
from app.server.database.collections import Collections
import app.server.database.services as model_service
from fastapi import APIRouter,Query,Path, Body, Request,Depends,HTTPException
from bson import json_util
from app.server.services.enumeration import vulnerability as vulnerability_services
from app.server.static import enums
from typing import Optional
router = APIRouter()
    
@router.get('/port-scan', summary='To get list of open ports on target')
async def port_scan(options:enums.ScanOptions,ports:Optional[str]=None,ip_address:str = Query(...)):
    """
        Ex: IP : 8.8.8.8
        
        Note : Do not specify any port if options = 'ALL'

        if SPECIFIC : 21,22,(end port must be ended by comma)

    """
    data = await vulnerability_services.nmap_port_scan(ip_address,options,ports)
    return {"status": "SUCCESS", "data": data}

@router.get('/os-scan', summary='To get os detail about target')
async def os_detection(ip_address:str = Query(...,description="Ex: IP : 8.8.8.8")):
    """
        Ex: IP : 8.8.8.8 
    """
    data = await vulnerability_services.nmap_os_scan(ip_address)
    return {"status": "SUCCESS", "data": data}

@router.get('/script-scan', summary='To run default scripts on target')
async def default_scripts(options:enums.ScanOptions,ports:Optional[str]=None,ip_address:str = Query(...)):
    """
        Ex: IP : 8.8.8.8
        
        Note : Do not specify any port if options = 'ALL'

        if SPECIFIC : 21,22,(end port must be ended by comma)
        
    """
    data =await  vulnerability_services.nmap_script_scan(ip_address,options,ports)
    return {"status": "SUCCESS", "data": data}

@router.get('/vulnerability-scan', summary='To get vulnerability details about target')
async def vulnerability_scripts(options:enums.ScanOptions,ports:Optional[str]=None,ip_address:str = Query(...)):
    """
        Ex: IP : 8.8.8.8
        
        Note : Do not specify any port if options = 'ALL'

        if SPECIFIC : 21,22,(end port must be ended by comma) 
    """
    data =  await vulnerability_services.nmap_vulnerability_scan(ip_address,options,ports)
    return {"status": "SUCCESS", "data": data}